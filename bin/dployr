#!/usr/bin/env ruby

$LOAD_PATH.push File.expand_path("../../lib", __FILE__)
require 'optparse'
require 'dployr'

command = ARGV[0]
options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner   = "  Usage: dployr <command> [options]"
  opt.separator  ""
  opt.separator  "  Commands"
  opt.separator  ""
  opt.separator  "    up        start instances"
  opt.separator  "    halt      stop instances"
  opt.separator  "    status    retrieve the instances status"
  opt.separator  "    test      run remote test in instances"
  opt.separator  "    deploy    start, provision and test running instances"
  opt.separator  "    provision instance provisioning"
  opt.separator  "    config    show the loaded config"
  opt.separator  "    init      create a sample Dployrfile"
  opt.separator  ""
  opt.separator  "  Options"
  opt.separator  ""

  opt.on("-e", "--environment ENV", "environment to pass to the instances") do |v|
    options[:environment] = v
  end

  opt.on("-a", "--attributes", "aditional attributes to pass to the configuration in matrix query format") do |v|
    options[:attributes] = v
  end

  opt.on("-p", "--provider", "provider to use (allow multiple values comma-separated)") do |v|
    options[:provider] = v
  end

  opt.on("-r", "--region", "region to use (allow multiple values comma-separated)") do |v|
    options[:provider] = v
  end

  opt.on("-h", "--help", "help") do
    puts opt_parser
  end

  opt.separator  ""
end

opt_parser.parse!

case command
when "up"
  puts "call #{options.inspect}"
when "halt"
  puts "call stop on options #{options.inspect}"
when "status"
  puts "call restart on options #{options.inspect}"
when "provision"
  puts "call restart on options #{options.inspect}"
when "test"
  puts "call restart on options #{options.inspect}"
when "deploy"
  puts "call restart on options #{options.inspect}"
when "config"
  dployr = Dployr::Init.new
  puts dployr.config.get_config_all
when "init"
  Dployr::Config::Create.write_file
else
  puts opt_parser
end
